#version 460
#extension GL_EXT_ray_query : require
#extension GL_EXT_nonuniform_qualifier : require
layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

struct Light
{
    vec4 data0;
    vec4 data1;
    vec4 data2;
    vec4 data3;
};

struct Material
{
    ivec4 texture_indices0;
    ivec4 texture_indices1;
    vec4 albedo;
    vec4 emissive;
    vec4 roughness_metallic;
};

struct Instance
{
    mat4 model_matrix;
    uint mesh_idx;
};

struct Vertex
{
    vec4 position;
    vec4 tex_coord;
    vec4 normal;
    vec4 tangent;
    vec4 bitangent;
};

layout(set = 0, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    vec4  current_prev_jitter;
    Light light;
    uint num_frames;
} globalUBO;

layout(set = 0, binding = 0, std430) readonly buffer MaterialBuffer
{
    Material data[];
} Materials;

layout(set = 0, binding = 1, std430) readonly buffer InstanceBuffer
{
    Instance data[];
} Instances;

layout(set = 0, binding = 3, std430) readonly buffer VertexBuffer
{
    Vertex data[];
} Vertices[1024];

layout(set = 0, binding = 4, std430) readonly buffer IndexBuffer
{
    uint data[];
} Indices[1024];

layout(set = 0, binding = 5, std430) readonly buffer SubmeshInfoBuffer
{
    uvec2 data[];
} SubmeshInfo[];

layout(push_constant, std430) uniform PushConstants
{
    float bias;
    uint num_frames;
    int g_buffer_mip;
} u_PushConstants;

layout(set = 0, binding = 2) uniform accelerationStructureEXT u_TopLevelAS;
layout(set = 3, binding = 0) uniform sampler2D s_GBuffer1;
layout(set = 3, binding = 3) uniform sampler2D sceneDepth;
layout(set = 3, binding = 1) uniform sampler2D s_GBuffer2;
layout(set = 1, binding = 0, r32ui) uniform writeonly uimage2D i_Output;
layout(set = 0, binding = 6) uniform sampler2D s_Textures[];
layout(set = 3, binding = 2) uniform sampler2D s_GBuffer3;

rayQueryEXT ray_query;
shared uint g_visibility;

vec3 world_position_from_depth(vec2 tex_coords, float ndc_depth, mat4 view_proj_inverse)
{
    vec2 screen_pos = (tex_coords * 2.0) - vec2(1.0);
    vec4 ndc_pos = vec4(screen_pos, ndc_depth, 1.0);
    vec4 world_pos = view_proj_inverse * ndc_pos;
    world_pos /= vec4(world_pos.w);
    return world_pos.xyz;
}

vec3 octohedral_to_direction(vec2 e)
{
    vec3 v = vec3(e, (1.0 - abs(e.x)) - abs(e.y));
    if (v.z < 0.0)
    {
        vec3 _122 = v;
        vec3 _127 = v;
        vec2 _135 = (vec2(1.0) - abs(_122.yx)) * ((step(vec2(0.0), _127.xy) * 2.0) - vec2(1.0));
        v.x = _135.x;
        v.y = _135.y;
    }
    return normalize(v);
}

int light_type(Light light)
{
    return int(light.data3.x);
}

vec3 light_direction(Light light)
{
    return light.data0.xyz;
}

float light_radius(Light light)
{
    return light.data1.w;
}

vec3 light_position(Light light)
{
    return light.data1.xyz;
}

float light_cos_theta_outer(Light light)
{
    return light.data3.y;
}

float light_cos_theta_inner(Light light)
{
    return light.data3.z;
}

void fetch_light_properties(Light light, vec3 P, vec3 N, vec2 rng, inout vec3 Wi, out float t_max, inout float attenuation)
{
    Light param = light;
    int type = light_type(param);
    if (type == 0)
    {
        Light param_1 = light;
        vec3 light_dir = light_direction(param_1);
        vec3 light_tangent = normalize(cross(light_dir, vec3(0.0, 1.0, 0.0)));
        vec3 light_bitangent = normalize(cross(light_tangent, light_dir));
        Light param_2 = light;
        float point_radius = light_radius(param_2) * sqrt(rng.x);
        float point_angle = (rng.y * 2.0) * 3.1415927410125732421875;
        vec2 disk_point = vec2(point_radius * cos(point_angle), point_radius * sin(point_angle));
        Wi = normalize((light_dir + (light_tangent * disk_point.x)) + (light_bitangent * disk_point.y));
        t_max = 10000.0;
        attenuation = 1.0;
    }
    else
    {
        if (type == 1)
        {
            Light param_3 = light;
            vec3 to_light = light_position(param_3) - P;
            vec3 light_dir_1 = normalize(to_light);
            float light_distance = length(to_light);
            vec3 light_tangent_1 = normalize(cross(light_dir_1, vec3(0.0, 1.0, 0.0)));
            vec3 light_bitangent_1 = normalize(cross(light_tangent_1, light_dir_1));
            Light param_4 = light;
            float current_light_radius = light_radius(param_4) / light_distance;
            float point_radius_1 = current_light_radius * sqrt(rng.x);
            float point_angle_1 = (rng.y * 2.0) * 3.1415927410125732421875;
            vec2 disk_point_1 = vec2(point_radius_1 * cos(point_angle_1), point_radius_1 * sin(point_angle_1));
            Wi = normalize((light_dir_1 + (light_tangent_1 * disk_point_1.x)) + (light_bitangent_1 * disk_point_1.y));
            t_max = light_distance;
            attenuation = 1.0 / (light_distance * light_distance);
        }
        else
        {
            Light param_5 = light;
            vec3 to_light_1 = light_position(param_5) - P;
            vec3 light_dir_2 = normalize(to_light_1);
            float light_distance_1 = length(to_light_1);
            vec3 light_tangent_2 = normalize(cross(light_dir_2, vec3(0.0, 1.0, 0.0)));
            vec3 light_bitangent_2 = normalize(cross(light_tangent_2, light_dir_2));
            Light param_6 = light;
            float current_light_radius_1 = light_radius(param_6) / light_distance_1;
            float point_radius_2 = current_light_radius_1 * sqrt(rng.x);
            float point_angle_2 = (rng.y * 2.0) * 3.1415927410125732421875;
            vec2 disk_point_2 = vec2(point_radius_2 * cos(point_angle_2), point_radius_2 * sin(point_angle_2));
            Wi = normalize((light_dir_2 + (light_tangent_2 * disk_point_2.x)) + (light_bitangent_2 * disk_point_2.y));
            t_max = light_distance_1;
            Light param_7 = light;
            float angle_attenuation = dot(Wi, light_direction(param_7));
            Light param_8 = light;
            Light param_9 = light;
            angle_attenuation = smoothstep(light_cos_theta_outer(param_8), light_cos_theta_inner(param_9), angle_attenuation);
            attenuation = angle_attenuation / (light_distance_1 * light_distance_1);
        }
    }
    attenuation *= clamp(dot(N, Wi), 0.0, 1.0);
}

float query_distance(vec3 world_pos, vec3 direction, float t_max)
{
    float t_min = 0.00999999977648258209228515625;
    uint ray_flags = 5u;
    rayQueryInitializeEXT(ray_query, u_TopLevelAS, ray_flags, 255u, world_pos, t_min, direction, t_max);
    for (;;)
    {
        bool _191 = rayQueryProceedEXT(ray_query);
        if (_191)
        {
            continue;
        }
        else
        {
            break;
        }
    }
    uint _193 = rayQueryGetIntersectionTypeEXT(ray_query, bool(1));
    if (_193 != 0u)
    {
        float _197 = rayQueryGetIntersectionTEXT(ray_query, bool(1));
        return (_197 < t_max) ? 0.0 : 1.0;
    }
    return 1.0;
}

void main()
{
    if (gl_LocalInvocationIndex == 0u)
    {
        g_visibility = 0u;
    }
    barrier();
    ivec2 size = textureSize(s_GBuffer1, u_PushConstants.g_buffer_mip);
    ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy);
    vec2 pixel_center = vec2(current_coord) + vec2(0.5);
    vec2 tex_coord = pixel_center / vec2(size);
    float depth = texelFetch(sceneDepth, current_coord, u_PushConstants.g_buffer_mip).x;
    uint result = 0u;
    if (depth != 1.0)
    {
        vec2 param = tex_coord;
        float param_1 = depth;
        mat4 param_2 = globalUBO.view_proj_inverse;
        vec3 world_pos = world_position_from_depth(param, param_1, param_2);
        vec2 param_3 = texelFetch(s_GBuffer2, current_coord, u_PushConstants.g_buffer_mip).xy;
        vec3 normal = octohedral_to_direction(param_3);
        vec3 ray_origin = world_pos + (normal * u_PushConstants.bias);
        vec2 rnd_sample = vec2(0.0);
        Light _523;
        _523.data0 = globalUBO.light.data0;
        _523.data1 = globalUBO.light.data1;
        _523.data2 = globalUBO.light.data2;
        _523.data3 = globalUBO.light.data3;
        Light param_4 = _523;
        vec3 param_5 = world_pos;
        vec3 param_6 = normal;
        vec2 param_7 = rnd_sample;
        vec3 param_8;
        float param_9;
        float param_10;
        fetch_light_properties(param_4, param_5, param_6, param_7, param_8, param_9, param_10);
        vec3 Wi = param_8;
        float t_max = param_9;
        float attenuation = param_10;
        if (attenuation > 0.0)
        {
            vec3 param_11 = ray_origin;
            vec3 param_12 = Wi;
            float param_13 = t_max;
            float _547 = query_distance(param_11, param_12, param_13);
            result = uint(_547);
        }
    }
    uint _552 = atomicOr(g_visibility, result << gl_LocalInvocationIndex);
    barrier();
    if (gl_LocalInvocationIndex == 0u)
    {
        imageStore(i_Output, ivec2(gl_WorkGroupID.xy), uvec4(g_visibility));
    }
}

