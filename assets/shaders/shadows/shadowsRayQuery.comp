#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_nonuniform_qualifier : require

#define RAY_TRACING
#include "../common.glsl"
//#include "../scene_descriptor_set.glsl"

// Temporary declaration
#if defined(RAY_TRACING)
layout (set = 0, binding = 1) uniform accelerationStructureEXT u_TopLevelAS;
#endif

#include "../rayquery.glsl"
#include "../bnd_sampler.glsl"
#define SOFT_SHADOWS
#define SHADOW_RAY_ONLY
#include "../lighting.glsl"

// ------------------------------------------------------------------
// DEFINES ----------------------------------------------------------
// ------------------------------------------------------------------

#define NUM_THREADS_X 8
#define NUM_THREADS_Y 4

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;

// ------------------------------------------------------------------
// DESCRIPTOR SETS --------------------------------------------------
// ------------------------------------------------------------------

layout(set = 0, binding = 0) uniform PerFrameUBO
{
    mat4  view_inverse;
    mat4  proj_inverse;
    mat4  view_proj_inverse;
    mat4  prev_view_proj;
    mat4  view_proj;
    vec4  cam_pos;
    vec4  current_prev_jitter;
    Light light;
    uint num_frames;
    uint inverse_scale;
} globalUBO;

layout(set = 0, binding = 2) uniform sampler2D gBufferA; // RGB: Albedo, A: Metallic
layout(set = 0, binding = 3) uniform sampler2D gBufferB; // RG: Normal, BA: Motion Vector
layout(set = 0, binding = 4) uniform sampler2D gBufferC; // R: Roughness, G: Curvature, B: Mesh ID, A: Linear Z
layout(set = 0, binding = 5) uniform sampler2D sceneDepth;
layout(set = 0, binding = 6, r32ui) uniform uimage2D outImage; // target

layout(set = 0, binding = 7) uniform sampler2D s_SobolSequence;
layout(set = 0, binding = 8) uniform sampler2D s_ScramblingRankingTile;

// ------------------------------------------------------------------------
// PUSH CONSTANTS ---------------------------------------------------------
// ------------------------------------------------------------------------
vec2 next_sample(ivec2 coord)
{
    return vec2(sample_blue_noise(coord, int(globalUBO.num_frames), 0, s_SobolSequence, s_ScramblingRankingTile),
                sample_blue_noise(coord, int(globalUBO.num_frames), 1, s_SobolSequence, s_ScramblingRankingTile));
}

/*
layout(push_constant) uniform PushConstants
{
    float bias;
    uint  num_frames;
    int   g_buffer_mip;
}
u_PushConstants;
*/

// ------------------------------------------------------------------
// SHARED -----------------------------------------------------------
// ------------------------------------------------------------------

shared uint g_visibility;

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    float bias = 0.5f;
    uint  num_frames = 1;

    int g_buffer_mip = 0;

    if (gl_LocalInvocationIndex == 0)
        g_visibility = 0;

    barrier();

    const ivec2 size          = textureSize(gBufferA, g_buffer_mip); // scale
    const ivec2 current_coord = ivec2(gl_GlobalInvocationID.xy) * int(globalUBO.inverse_scale);
    const vec2  pixel_center  = vec2(current_coord) + vec2(0.5);
    const vec2  tex_coord     = pixel_center / vec2(size);

    float depth = texelFetch(sceneDepth, current_coord, g_buffer_mip).r; // scaled!!

    uint result = 0;

    if (depth != 1.0f)
    {
        vec3 world_pos  = world_position_from_depth(tex_coord, depth, globalUBO.view_proj_inverse);
        vec3 normal     = octohedral_to_direction(texelFetch(gBufferB, current_coord, g_buffer_mip).rg);
        vec3 ray_origin = world_pos + normal * bias;

        // Fetch a blue noise value for this frame.
        // TODO: Temporarily use 0.f
        vec2 rnd_sample = vec2(1.f);//next_sample(current_coord);

        // Fetch the jittered shadow ray direction, ray length and attenuation value.
        vec3  Wi;
        float t_max;
        float attenuation;

        fetch_light_properties(globalUBO.light, world_pos, normal, rnd_sample, Wi, t_max, attenuation);

        // Only fire a shadow ray if the attenuation is above zero.
        if (attenuation > 0.0f)
        {
            result = uint(query_distance(ray_origin, Wi, t_max));
        }   
    }

    atomicOr(g_visibility, result << gl_LocalInvocationIndex);

    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
        imageStore(outImage, ivec2(gl_WorkGroupID.xy), uvec4(g_visibility));
    }
        
}

// ------------------------------------------------------------------